package list;

import javax.xml.crypto.NodeSetData;

public class ConcLinkedList<T> implements IDs<T> {

	Node<T> head;
	Node<T> tail;

	public ConcLinkedList() {
		head = new Node<T>();
		head.setIndex(head.hashCode());
		head.setItem(null);

		tail = new Node<T>();
		tail.setIndex(tail.hashCode());
		tail.setItem(null);
		tail.setNext(null);
	}

	@Override
	public boolean add(T item) {
		int key = item.hashCode();
		Node<T> pred = head;
		pred.lock.lock();
		try{
			Node<T> cur = pred.getNext();
			cur.lock.lock();
			try{
				while(key < cur.getIndex()){
					pred.lock.unlock();
					pred=cur;
					cur = cur.getNext();
					cur.lock.lock();
				}
				if(key == cur.getIndex()){
					return false;
				}
				Node<T> node = new Node<T>();
				node.setIndex(key);
				node.setItem(item);
				pred.setNext(node);
				node.setNext(cur);
				return true;
			}finally{
				cur.lock.unlock();
			}
		
		}finally{
			pred.lock.unlock();
		}
	}

	@Override
	public boolean remove(T item) {
		// TODO Auto-generated method stub
		int key = item.hashCode();
		Node<T> pred = head;
		pred.lock.lock();
		try{
			Node<T> cur = pred.getNext();
			cur.lock.lock();
			try{
				while(key < cur.getIndex()){
					pred.lock.unlock();
					pred = cur;
					cur = cur.getNext();
					cur.lock.lock();
					
				}
				if(cur.key == key){
					
				}
			}finally{
				cur.lock.unlock();
			}
			return true;
		}finally{
			pred.lock.unlock();
		}
	}

	@Override
	public boolean contains(T item) {
		// TODO Auto-generated method stub
		return false;
	}

}
