package ds;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class BoundedQ<T> {
	ReentrantLock enqLock, deqLock;
	Node<T> head;
	Node<T> tail;
	AtomicInteger size;
	final int CAPACITY = 15;
	Condition notFullCondition;
	Condition notEmptyCondition;
	
	public BoundedQ(){
		enqLock = new ReentrantLock();
		deqLock = new ReentrantLock();
		size = new AtomicInteger(0);
		notFullCondition  = enqLock.newCondition();
		notEmptyCondition = deqLock.newCondition();
	}
	
	
	public void showList(){
		Node node = head.next;
		while(node != null){
			System.out.println("Item is : "+node.item);
			node = node.next;
		}
	}
	
	public void enqMethod(T item){
		boolean alertDequer = false;
		enqLock.lock();
		try{
			while(size.get() == CAPACITY){
				//Queue is full
				try {
					notFullCondition.await();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			Node n = new Node<T>(item);
			tail.next = n;
			tail = tail.next;
			if(size.getAndIncrement() == 0){
				alertDequer = true;
			}
		}finally{
			enqLock.unlock();
		}
		if(alertDequer){
			deqLock.lock();
			try{
				notEmptyCondition.signalAll();
			}finally{
				deqLock.unlock();
			}
		}
	}
}
