package ds;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class BoundedQ<T> {
	ReentrantLock enqLock, deqLock;
	Node head;
	Node tail;
	AtomicInteger size;
	final int CAPACITY = 15;
	Condition notFullCondition;
	Condition notEmptyCondition;
	
	public BoundedQ(){
		notFullCondition  = enqLock.newCondition();
		notEmptyCondition = deqLock.newCondition();
	}
	
	
	public void enqMethod(T item){
		boolean alertDequer = false;
		enqLock.lock();
		try{
			while(size.get() == CAPACITY){
				//Queue is full
				notFullCondition.await();
			}
			
		}finally{
			enqLock.unlock();
		}
	}
}
